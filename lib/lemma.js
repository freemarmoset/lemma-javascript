function MessageBuilder(a){this.lemma_id=a}function EventFilter(){this.callbacks={}}function TcpReader(a){this.callback=a,this.buffer=""}function MessageHandler(a){this.tcpReader=new TcpReader(function(b){try{parsed=JSON.parse(b)}catch(c){console.log("Error Parsing badly formed JSON: "+b),console.log(c)}parsed[0]=="event"&&a.handle(parsed[2],parsed[3])})}function EventSender(a,b){this.systemVersion="1.0",this.webSocket=a,this.builder=b}function Lemma(a){this.messageBuilder=new MessageBuilder(a),this.eventFilter=new EventFilter,this.messageHandler=new MessageHandler(this.eventFilter)}MessageBuilder.prototype.event=function(a,b){var c=[];return c.push("event"),c.push(this.lemma_id),c.push(a),c.push(b),JSON.stringify(c)},MessageBuilder.prototype.register=function(a,b,c,d){var e=[];return e.push("register"),e.push(this.lemma_id),e.push(0),e.push(b),e.push(a),e.push(c),e.push(d),JSON.stringify(e)},EventFilter.prototype.add=function(a,b){this.callbacks[a]==undefined&&(this.callbacks[a]=[]),this.callbacks[a].push(b)},EventFilter.prototype.handle=function(a,b){callbacks=this.callbacks[a],callbacks!=undefined&&callbacks.forEach(function(c){c(a,b)})},EventFilter.prototype.events=function(a){return Object.keys(this.callbacks)},TcpReader.prototype.read=function(a){this.buffer=this.buffer.concat(a),size=this.payloadSize(this.buffer);while(size>0&&this.buffer.length>=6+size)this.consumeOne(size),size=this.payloadSize(this.buffer)},TcpReader.prototype.payloadSize=function(a){return this.buffer.length>=6?parseInt(a.slice(0,6)):-1},TcpReader.prototype.consumeOne=function(a){messageStart=6,messageEnd=6+a,this.callback(this.buffer.slice(messageStart,messageEnd)),this.buffer=this.buffer.slice(messageEnd,this.buffer.length)},MessageHandler.prototype.receive=function(a){this.tcpReader.read(a)},EventSender.prototype.sendEvent=function(a,b){this.sendMessage(this.builder.event(a,b))},EventSender.prototype.sendRegister=function(a,b){this.sendMessage(this.builder.register(a,b,"web",this.systemVersion))},EventSender.prototype.sendMessage=function(a){this.webSocket.send(this.zeroPad(a.length,6)+a)},EventSender.prototype.zeroPad=function(a,b){return(new Array(b+1-a.toString().length)).join("0")+a},Lemma.prototype.debug=function(a){console.log(a)},Lemma.prototype.begin=function(a,b){var c=this;ws=new WebSocket("ws://"+a+":"+b.toString()+"/websocket"),c.sender=new EventSender(ws,this.messageBuilder),ws.onmessage=function(a){c.messageHandler.receive(a.data)},ws.onclose=function(){debug("socket closed")},ws.onopen=function(){console.log("connected..."),c.sender.sendRegister([],c.eventFilter.events())},ws.onerror=function(a){console.debug("Web socket Error"),console.debug(a)}},Lemma.prototype.hears=function(a,b){this.eventFilter.add(a,b)},Lemma.prototype.sendEvent=function(a,b){this.sender!=undefined?this.sender.sendEvent(a,b):this.debug("You must 'begin' the lemma before sending a message")};